# Project Knowledge Validation: Comprehensive Artifact Analysis & Evidence-Based Updates

You are tasked with validating and updating the existing project knowledge base through comprehensive analysis and evidence-based corrections (think harder). This process ensures the **knowledge foundation remains accurate, current, and trustworthy** for ongoing development work.

## Critical Mission

Validate all existing knowledge artifacts against the current codebase reality and make evidence-based updates to maintain knowledge base integrity. The accuracy and currency of this validation is crucial for reliable project development decisions.

<%~ include('partials/project-context', it) %>

## Three-Phase Validation Workflow

### Phase 1: Comprehensive Current State Analysis

Conduct **thorough analysis** of the current codebase state to identify changes since last knowledge update:

#### Codebase Evolution Assessment
- Examine current directory structure and organization changes
- Analyze dependency updates, new libraries, and technology stack evolution
- Identify architectural changes, new modules, and structural modifications
- Study code pattern evolution, new conventions, and implementation changes

#### Implementation Reality Check
- Trace current application entry points and bootstrap processes
- Map current system boundaries, APIs, and integration points
- Understand current data flow, state management, and architectural patterns
- Assess current configuration, deployment, and operational approaches

### Phase 2: Cross-Validation & Evidence Gathering

**Systematically compare** documented knowledge against codebase reality:

#### Architecture Validation
- **System Overview**: Verify documented purpose aligns with current functionality
- **Components & Modules**: Confirm documented components match current implementation
- **Technology Stack**: Validate documented technologies against actual dependencies
- **Architectural Patterns**: Check if documented patterns are still actively used
- **Data Flow**: Ensure documented data flow represents current implementation
- **Security & Performance**: Verify documented approaches match current practices

#### Codebase Documentation Validation  
- **Project Structure**: Compare documented structure with current directory organization
- **Key Files**: Verify documented important files still exist and serve described purposes
- **Dependencies**: Check documented libraries against current package.json/requirements
- **Build & Development**: Validate documented processes against current scripts and workflows
- **Coding Standards**: Ensure documented conventions match current code patterns

#### Knowledge Artifact Validation
- **Memory cards**: Verify if the statements in memory cards are still relevant
- **Evidence Collection**: For each artifact, gather specific file/line references that prove or disprove relevance

### Phase 3: Evidence-Based Knowledge Updates

**Make conservative, justified updates** using the `update_knowledge` tool:

#### Update Criteria (Conservative Approach)
- **Concrete Evidence Required**: Only update when you have specific proof of inaccuracy
- **Preserve by Default**: Keep existing content unless definitively wrong or outdated
- **Reference-Based Changes**: Provide specific file:line references for all claimed changes
- **No Assumptions**: Never remove content based on speculation or incomplete analysis

#### Update Execution
Use the `update_knowledge` tool with appropriate parameters:
- **Architecture Content**: Update `architectureContent` only if significant inaccuracies found
- **Codebase Content**: Update `codebaseContent` only if structural changes require documentation updates
Use the `memory_card_add_or_update`, `memory_card_remove` tools to update memory cards.

#### Evidence Documentation
For every change made, document:
- **What was changed**: Specific content modified or removed
- **Why it was changed**: Concrete evidence from codebase analysis  
- **Supporting references**: File paths and line numbers that justify the change

### Evidence-Based Update Guidelines

**Required Evidence for Updates:**
- **File References**: Include specific `file:line` or `file:startLine-endLine` references
- **Concrete Proof**: Point to actual code, configuration, or structure changes
- **Verification**: Ensure referenced files and lines actually exist and support claims

**Conservative Approach:**
- Only update when you have definitive proof of inaccuracy
- Preserve existing content unless clearly wrong or outdated
- Document reasoning with specific evidence for every change
- When in doubt, keep existing content rather than remove it

## Quality & Integrity Requirements

### Evidence Standards
- **Specific References**: All claims must include file:line evidence
- **Verifiable Facts**: Every statement must be provable against actual code
- **Conservative Bias**: Prefer keeping questionable content over removing it
- **Documentation Trail**: Clearly explain reasoning for all modifications

### Knowledge Base Integrity
- **Accuracy**: Ensure all content reflects current codebase reality
- **Completeness**: Maintain comprehensive coverage without arbitrary gaps
- **Consistency**: Keep all artifacts aligned and cross-referenced properly
- **Reliability**: Maintain knowledge base as trustworthy development resource

## Success Criteria

Your validation is successful when:
1. **Thorough Analysis Complete**: Current codebase state is comprehensively understood
2. **Evidence-Based Comparison**: All knowledge claims validated against actual implementation  
3. **Justified Updates Made**: Only necessary changes made with concrete supporting evidence
4. **Knowledge Base Updated**: All updates persisted using `update_knowledge`,`memory_card_add_or_update`, `memory_card_remove` tools with proper justification
5. **Integrity Maintained**: Knowledge base remains reliable foundation for future development

## Critical Guidelines

**NEVER remove or modify content without specific evidence of inaccuracy**
**ALWAYS provide file:line references for claimed changes**
**PRESERVE historical decisions and patterns unless proven irrelevant**
**MAINTAIN comprehensive documentation coverage**

**Remember**: The knowledge base is a critical project asset. Future developers and AI agents depend on its accuracy. Changes must be evidence-based and justified to maintain trust and reliability.

<% if (it.comments?.length > 0 ) {%>
# User comments
<%= it.comments %>
<%}%>
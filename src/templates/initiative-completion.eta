# Complete Initiative: <%= it.context.initiative.name %>

You are completing the following initiative and consolidating its knowledge into the project knowledge base (think hard):

**Initiative ID:** <%= it.context.initiative.id %>
**Initiative Name:** <%= it.context.initiative.name %>
**Current State:** <%= it.context.initiative.state %>

<% if (it.context.initiative.overview) { %>**Overview:** <%= it.context.initiative.overview %>

<% } %><% if (it.context.initiative.spec) { %>## Initiative Specification

<%= it.context.initiative.spec %>

<% } %><%~ include('partials/project-context', it) %>

## Stage 1: Task Validation ‚úì

All tasks in this initiative have been completed:

<% it.context.tasks.forEach(function(task) { %>- ‚úÖ **<%= task.id %>: <%= task.name %>** (Phase <%= task.phase %>, Order <%= task.order %>) - Status: <%= task.status %>
<% }); %>

**Total Tasks:** <%= it.context.tasks.length %>
**Completed Tasks:** <%= it.context.tasks.filter(t => t.status === 'done').length %>

## Stage 1.5: Issue Validation & Analysis

### Initiative Issues Summary

<% if (it.context.issues.length > 0) { %>**Total Issues:** <%= it.context.issues.length %>
**Closed Issues:** <%= it.context.issues.filter(i => i.status === 'closed').length %>
**Open Issues:** <%= it.context.issues.filter(i => i.status === 'open').length %>

#### Issue Details
<% it.context.issues.forEach(function(issue) { %>- <%= issue.status === 'closed' ? '‚úÖ' : 'üü°' %> **<%= issue.id %>: <%= issue.name %>** 
  - Status: <%= issue.status %>
  - Strategy: <%= issue.actualStrategy || issue.recommendedStrategy || 'TBD' %>
  <% if (issue.summary) { %>- Summary: <%= issue.summary %><% } %>
  <% if (issue.tags.length > 0) { %>- Tags: `[<%= issue.tags.join(', ') %>]`<% } %>
<% }); %>

#### Issues Knowledge Extraction
<% it.context.issues.filter(i => i.status === 'closed' && i.summary).forEach(function(issue) { %>**<%= issue.name %>**:
- Problem: <%= issue.description %>
- Resolution Strategy: <%= issue.actualStrategy %>
- Outcome: <%= issue.summary %>
- Knowledge Value: <%= issue.summary.length > 50 && issue.actualStrategy ? 'High - Consider for solutions knowledge base' : 'Low - Initiative-specific' %>

<% }); %><% } else { %>**No issues recorded for this initiative.**

<% } %>## Stage 2: Knowledge Extraction

### Initiative Memory Cards Summary
<%~ include('partials/memory-cards', { memoryCards: it.initiativeMemoryCards }) %>

### Git Analysis Instructions

To extract additional knowledge from the development process:

1. **Run git log analysis** to understand the scope of changes:
   ```bash
   git log --oneline --since="<initiative-start-date>" --until="now" --grep="<%= it.context.initiative.id %>" --all
   ```

2. **Analyze commit patterns** to identify:
   - Major architectural decisions not captured in knowledge items
   - Refactoring patterns that emerged during development
   - Technical debt solutions implemented
   - Integration patterns with existing codebase

3. **Review file changes** for significant modifications:
   ```bash
   git diff --name-status <initial-commit>..<final-commit>
   ```

## Stage 3: Knowledge Quality Filtering & Promotion

Apply the following criteria to determine which memory cards should be promoted to the project knowledge memory cards:

### Memory card Promotion Criteria

**Promote decitions that:**
- ‚úÖ Apply beyond this initiative (architectural impact)
- ‚úÖ Are tagged with "**" (importance marker)
- ‚úÖ Set precedents for future development
- ‚úÖ Solve recurring organizational problems
- ‚úÖ Have scope beyond "local" implementation

**Promote solutions that:**
- ‚úÖ Address non-trivial problems (>50 char description)
- ‚úÖ Have clear code references
- ‚úÖ Are tagged as "validated" or "reusable"
- ‚úÖ Address common development problems
- ‚úÖ Can be applied to other areas of the codebase

**Promote patterns that:**
- ‚úÖ Were used 3+ times within initiative
- ‚úÖ Have complete code examples
- ‚úÖ Are tagged as "structured" and "validated"
- ‚úÖ Demonstrate reusable implementation approach
- ‚úÖ Apply to multiple components/modules

## Stage 4: Execute Knowledge Base Updates

Based on the quality filtering analysis above, execute the following tool calls to promote valuable knowledge.

### Step 1: Update Project Knowledge Base

Execute `memory_card_add_or_update` call to promote approved knowledge items.

### Step 2: Analyze Architecture & Codebase Impact

Review if this initiative's changes require updates to the main project knowledge files:

**Architecture.md Updates Needed?**
- Did this initiative introduce new architectural components?
- Did it establish new patterns or constraints?
- Did it change how systems interact?

**Codebase.md Updates Needed?**
- Did this initiative add new major modules?
- Did it refactor significant portions of the codebase?
- Did it change the project structure?

If architecture or codebase updates are needed, include them in the `update_knowledge` tool call above with:
```json
{
  "architectureContent": "Updated architecture content...",
  "codebaseContent": "Updated codebase content..."
}
```

## Stage 5: Complete the Initiative

After successfully updating the knowledge base, mark the initiative as complete:

```json
{
  "name": "initiative_update",
  "arguments": {
    "id": "<%= it.context.initiative.id %>",
    "state": "completed"
  }
}
```

## Completion Workflow Summary

1. ‚úÖ **Validate** - All tasks confirmed completed
2. üîç **Extract** - Knowledge items identified and analyzed  
3. üéØ **Filter** - Quality criteria applied to determine promotions
4. üìö **Update** - Project knowledge base updated with valuable items
5. üèÅ **Complete** - Initiative marked as completed

## Guidelines for Execution

### Knowledge Promotion Best Practices
- **Be selective**: Only promote knowledge that truly benefits the entire project
- **Maintain quality**: Ensure promoted items have clear descriptions and proper tags
- **Update references**: Make sure code references are accurate and helpful
- **Document rationale**: Include tags that explain why items were promoted

### Tool Execution Order
1. First execute `update_knowledge` with all approved items
2. Then execute `initiative_update` to mark as completed
3. Confirm both operations succeeded before declaring completion

### Final Validation
After tool execution:
- Verify knowledge base was updated correctly
- Confirm initiative status changed to "completed" 
- Check that no errors occurred during the process

---

**Ready to Execute**: You now have all the context and tools needed to complete this initiative successfully. Begin with the knowledge base updates, then mark the initiative as complete.
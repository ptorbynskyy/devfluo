# Collect Knowledge from Initiative Work: <%= it.initiativeId %>

You are tasked with collecting valuable knowledge (decisions, solutions, and patterns) that emerged during manual work or agent guidance within initiative **<%= it.initiativeId %>**.
Think.

## Data Sources for Analysis

Analyze the following sources to extract knowledge:

### 1. Git WorkTree Changes
- Use `git status` to see current changes
- Use `git diff` to analyze modifications
- Use `git log --oneline -10` to review recent commits
- Look for patterns in code changes, new files, and modifications

### 2. Agent Communication Session
- Review the current conversation history
- Identify key decisions made during the session
- Note problems encountered and solutions implemented
- Extract patterns that emerged from the work

## Knowledge Collection Framework (initiative memory cards)

Extract and categorize insights into three types:

### Decisions
Key technical or design choices made during the work:
- **Format**: Decision name and rationale
- **Examples**: 
  - `database-migration-strategy: Use incremental migrations with rollback support`
  - `error-handling-approach: Centralized error boundaries with user-friendly messages`

### Solutions  
Problems encountered and how they were resolved:
- **Format**: Problem description → Solution approach
- **Examples**:
  - `Type errors in legacy code → Added incremental TypeScript migration with @ts-ignore comments`
  - `Performance issues with data fetching → Implemented caching layer with React Query`

### Patterns
Reusable implementation approaches or architectural patterns:
- **Format**: Pattern name, description, and optional code references
- **Examples**:
  - `api-error-handling: Standardized error response format with consistent status codes`
  - `component-composition: HOC pattern for cross-cutting concerns like authentication`

## Resource Links

Use these resources if you need additional context that wasn't previously loaded in the session:

### Project-Level Resources
- **Architecture Knowledge**: `project://knowledge/architecture` - Project architecture documentation
- **Codebase Knowledge**: `project://knowledge/codebase` - Codebase-specific knowledge
- **Project Memory cards**: `project://memory-cards`, `project://memory-cards/item/{name}` - Global knowledge memory cards
- **Backlog Items**: `project://backlog/list` - Product backlog with feature requests

### Initiative-Specific Resources  
- **Initiative Overview**: `project://initiative/item/<%= it.initiativeId %>` - Full initiative details with tasks
- **Initiative Memory Cards**: `project://initiatives/<%= it.initiativeId %>/memory-cards`, `project://initiatives/<%= it.initiativeId %>/memory-cards/{name}` - Initiative-specific knowledge memory cards
- **Initiative Issues**: `project://initiative/issues/<%= it.initiativeId %>` - Issues within this initiative
- **All Initiatives**: `project://initiative/list` - List of all initiatives for context

### Individual Item Resources (if needed)
- **Specific Backlog Item**: `project://backlog/item/{id}` - Individual backlog item details
- **Specific Issue**: `project://initiative/issues/<%= it.initiativeId %>/{issueId}` - Individual issue details

*Note: If you haven't previously loaded project or initiative context in this session, use the above resources to gather necessary background information.*

## Analysis Process

1. **Git Analysis**
   - Review all changes in the working tree
   - Identify new files, modified files, and deleted files
   - Look for patterns in the types of changes made
   - Note any architectural or design decisions reflected in code

2. **Session Analysis**
   - Review conversation history for explicit decisions
   - Identify problems that were discussed and solved
   - Extract patterns that were implemented or recommended
   - Note any deviations from original plans and why they occurred

3. **Knowledge Extraction**
   - Categorize findings into decisions, solutions, and patterns
   - Ensure each item has clear description and appropriate tags
   - For patterns, include code references if specific implementations exist
   - Focus on insights that would be valuable for future work

## Knowledge Update Process

Use the `memory_card_add_or_update` tools to store collected knowledge:

```json
{
    "scope": "<%= it.initiativeId %>",
    "name": "card-identifier",
    "title": "card-title",
    "content": "Clear description in Markdown format, can include code snippets and links.",
    "tags": ["relevant", "tags", "here"],
    "contextIncludingPolicy": "auto/always"
}
```

## Quality Guidelines

- **Be Specific**: Provide concrete, actionable descriptions
- **Add Context**: Include why decisions were made, not just what was decided  
- **Tag Appropriately**: Use relevant tags for future searchability
- **Include References**: Add code references where patterns/solutions are implemented
- **Focus on Value**: Only capture knowledge that would benefit future work

## Execution Instructions

1. **Start with Git analysis** to understand the scope of changes
2. **Review session history** for decisions and problem-solving discussions  
3. **Extract valuable insights** using the framework above
4. **Update the initiative** using the initiative_update tool
5. **Provide a summary** of knowledge collected and stored

Begin your analysis now and collect all valuable knowledge from this initiative work session.

<% if (it.comments?.length > 0 ) {%>
# User comments
<%= it.comments %>
<%}%>